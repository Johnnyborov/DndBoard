@page "/map"

<h3>MapComponent</h3>
@_count

<img @ref="_myImage" src="/favicon.ico" hidden />

<div @ref="_divCanvas" @onclick="OnClick" @onmousemove="OnMouseMove">
    <BECanvas @ref="_myCanvas" Height="600" Width="600"></BECanvas>
</div>


@code {
    private ElementReference _myImage;
    private ElementReference _divCanvas;
    private BECanvasComponent _myCanvas;
    private Canvas2DContext _canvasContext;

    private int _count;

    private async Task OnMouseMove(MouseEventArgs mouseEventArgs)
    {
        await OnClick(mouseEventArgs);
    }

    private async Task OnClick(MouseEventArgs mouseEventArgs)
    {
        _count++;
        _canvasContext = await _myCanvas.CreateCanvas2DAsync();


        await _canvasContext.ClearRectAsync(0, 0, _myCanvas.Width, _myCanvas.Height);
        await _canvasContext.SetFillStyleAsync("Red");
        await _canvasContext.FillRectAsync(0, 0, _myCanvas.Width, _myCanvas.Height);

        await _canvasContext.SetFillStyleAsync("Green");
        await _canvasContext.FillRectAsync(10, 10, _myCanvas.Width-20, _myCanvas.Height-20);


        await _canvasContext.SaveAsync();
        for (var i = 0; i < 6; i++)
        {
            await _canvasContext.SetFillStyleAsync($"#{i}F0000");
            await _canvasContext.BeginPathAsync();
            await _canvasContext.MoveToAsync(350, 350);
            await _canvasContext.ArcAsync(350, 350, 200,
                (Math.PI / 180) * 60 * i,
                (Math.PI / 180) * 60 * (i+1), false);
            await _canvasContext.ClosePathAsync();
            await _canvasContext.FillAsync();
        }
        await _canvasContext.RestoreAsync();

        await _canvasContext.DrawImageAsync(_myImage, 22, 33);
    }
}
