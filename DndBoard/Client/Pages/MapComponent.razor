@page "/map"

<h3>MapComponent</h3>
@this.count

<img @ref="this.myImage" src="/favicon.ico" hidden />

<div @ref="this.divCanvas" @onclick="this.OnClick" @onmousemove="this.OnMouseMove">
    <BECanvas @ref="this.myCanvas" Height="600" Width="600"></BECanvas>
</div>


@code {
    private ElementReference myImage;
    private ElementReference divCanvas;
    private BECanvasComponent myCanvas;
    private Canvas2DContext canvasContext;

    private int count;

    private async Task OnMouseMove(MouseEventArgs mouseEventArgs)
    {
        await this.OnClick(mouseEventArgs);
    }

    private async Task OnClick(MouseEventArgs mouseEventArgs)
    {
        this.count++;
        this.canvasContext = await this.myCanvas.CreateCanvas2DAsync();


        await this.canvasContext.ClearRectAsync(0, 0, this.myCanvas.Width, this.myCanvas.Height);
        await this.canvasContext.SetFillStyleAsync("Red");
        await this.canvasContext.FillRectAsync(0, 0, this.myCanvas.Width, this.myCanvas.Height);

        await this.canvasContext.SetFillStyleAsync("Green");
        await this.canvasContext.FillRectAsync(10, 10, this.myCanvas.Width-20, this.myCanvas.Height-20);


        await this.canvasContext.SaveAsync();
        for (var i = 0; i < 6; i++)
        {
        await this.canvasContext.SetFillStyleAsync($"#{i}F0000");
            await this.canvasContext.BeginPathAsync();
            await this.canvasContext.MoveToAsync(350, 350);
            await this.canvasContext.ArcAsync(350, 350, 200,
                (Math.PI / 180) * 60 * i,
                (Math.PI / 180) * 60 * (i+1), false);
            await this.canvasContext.ClosePathAsync();
            await this.canvasContext.FillAsync();
        }
        await this.canvasContext.RestoreAsync();

        await this.canvasContext.DrawImageAsync(this.myImage, 22, 33);
    }
}
